
name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"

env:
  REGISTRY: rooibos75
  IMAGE_NAME: bambu-monitor

jobs:
  get_version:
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_output.outputs.version }}
      is_semver: ${{ steps.set_output.outputs.is_semver }}
    steps:
        - name: Set image tag
          id: set_output
          run: |
            ref="${GITHUB_REF##*/}"
            if [[ "$ref" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "version=$ref" >> $GITHUB_OUTPUT
              echo "is_semver=true" >> $GITHUB_OUTPUT
            else
            echo "version=$ref-${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "is_semver=false" >> $GITHUB_OUTPUT
            fi


  docker_build:
    name: Build ‚û°Ô∏è Push
    runs-on: ubuntu-latest
    needs: get_version
    env:
      IMAGE_TAG: ${{ needs.get_version.outputs.version }}
      is_semver: ${{ needs.get_version.outputs.is_semver }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v5

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the Docker image
        run: |
          docker buildx create --use --name xbuilder 
          docker buildx build --load --progress plain -t ${REGISTRY}/${IMAGE_NAME}:test \
            --cache-to type=registry,ref=${REGISTRY}/${IMAGE_NAME}:build-cache \
            --cache-from type=registry,ref=${REGISTRY}/${IMAGE_NAME}:build-cache \
            .

      - name: Docker tags and push
        run: |
          docker tag ${REGISTRY}/${IMAGE_NAME}:test ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
          docker push ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
          if [[ "${{ env.is_semver }}" == "true" ]]; then
            echo "Tagging image ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} as latest"
            docker tag ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ${REGISTRY}/${IMAGE_NAME}:latest
            docker push ${REGISTRY}/${IMAGE_NAME}:latest
          fi
          
  helm_artifact:
    runs-on: ubuntu-latest
    name: Helm Chart Artifact
    needs: get_version
    steps:
      - name: Check out the repo
        uses: actions/checkout@v5

      - name: Setup version in Chart.yaml
        run: |
          echo "Version is: ${{ needs.get_version.outputs.version }}"
          sed -i "s/appVersion: .*/appVersion: ${{ needs.get_version.outputs.version }} /" helm/Chart.yaml
          cat helm/Chart.yaml
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
            name: helm-chart
            path: helm/
            if-no-files-found: error

  deploy:
    name: üöÄ
    runs-on: bbox
    needs: [docker_build, helm_artifact, get_version]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 'Download Artifact'
        uses: actions/download-artifact@v4
        with:
          name: helm-chart
          path: helm/

      - name: 'Deploy Helm Chart'
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          helmfile apply -f ./helm/helmfile.yaml \
            --set image.tag=${{ needs.get_version.outputs.version }} \
            --set image.repository=${{ env.REGISTRY }} \
            --set image.name=${{ env.IMAGE_NAME }} 

  trivy_scan:
    name: Scan
    runs-on: ubuntu-24.04
    needs: [get_version, docker_build]
    env:
      IMAGE_TAG: ${{ needs.get_version.outputs.version }}
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
